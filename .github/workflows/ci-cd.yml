name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  security-events: write

jobs:
  # Frontend Tests and Build
  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.12.0'
          cache: 'npm'
          cache-dependency-path: 'frontend/package.json'

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Run frontend linting
        run: cd frontend && npm run lint

      - name: Run frontend tests
        run: cd frontend && npm test -- --run --coverage

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/cobertura-coverage.xml
          flags: frontend

  # Backend Tests and Quality
  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: project_management_db_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements*.txt'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install black flake8 isort coverage

      - name: Run backend linting (flake8)
        run: cd backend && flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run backend code formatting check (black)
        run: cd backend && black --check .

      - name: Run backend tests with coverage
        env:
          DEBUG: False
          SECRET_KEY: test-secret-key
          DB_ENGINE: django.db.backends.postgresql
          DB_NAME: project_management_db_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          HAYSTACK_BACKEND: simple
        run: |
          cd backend
          python manage.py migrate
          coverage run --source='.' manage.py test
          coverage report
          coverage xml

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml
          flags: backend

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker Build
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deployment/docker/Dockerfile.backend
          tags: project-dashboard:backend-${{ github.sha }}
          push: false

      - name: Build frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deployment/docker/Dockerfile.frontend
          tags: project-dashboard:frontend-${{ github.sha }}
          push: false

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [frontend, backend, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Deploy notification
        run: |
          echo "ðŸš€ Deployment to production would occur here"
          echo "Git commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref }}"
